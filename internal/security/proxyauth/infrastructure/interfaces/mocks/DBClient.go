// Code generated by mockery v2.49.0. DO NOT EDIT.

package mocks

import (
	errors "github.com/edgexfoundry/go-mod-core-contracts/v4/errors"

	mock "github.com/stretchr/testify/mock"
)

// DBClient is an autogenerated mock type for the DBClient type
type DBClient struct {
	mock.Mock
}

// AddKey provides a mock function with given fields: name, content
func (_m *DBClient) AddKey(name string, content string) errors.EdgeX {
	ret := _m.Called(name, content)

	if len(ret) == 0 {
		panic("no return value specified for AddKey")
	}

	var r0 errors.EdgeX
	if rf, ok := ret.Get(0).(func(string, string) errors.EdgeX); ok {
		r0 = rf(name, content)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.EdgeX)
		}
	}

	return r0
}

// KeyExists provides a mock function with given fields: name
func (_m *DBClient) KeyExists(name string) (bool, errors.EdgeX) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for KeyExists")
	}

	var r0 bool
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(string) (bool, errors.EdgeX)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) errors.EdgeX); ok {
		r1 = rf(name)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// ReadKeyContent provides a mock function with given fields: name
func (_m *DBClient) ReadKeyContent(name string) (string, errors.EdgeX) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for ReadKeyContent")
	}

	var r0 string
	var r1 errors.EdgeX
	if rf, ok := ret.Get(0).(func(string) (string, errors.EdgeX)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) errors.EdgeX); ok {
		r1 = rf(name)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// UpdateKey provides a mock function with given fields: name, content
func (_m *DBClient) UpdateKey(name string, content string) errors.EdgeX {
	ret := _m.Called(name, content)

	if len(ret) == 0 {
		panic("no return value specified for UpdateKey")
	}

	var r0 errors.EdgeX
	if rf, ok := ret.Get(0).(func(string, string) errors.EdgeX); ok {
		r0 = rf(name, content)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.EdgeX)
		}
	}

	return r0
}

// NewDBClient creates a new instance of DBClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDBClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *DBClient {
	mock := &DBClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
